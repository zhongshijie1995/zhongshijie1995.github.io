<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>实时音视频通话项目从零开始</title>
    <link href="/posts/50001/"/>
    <url>/posts/50001/</url>
    
    <content type="html"><![CDATA[<h1 id="集成Mediasoup的客户端和服务端的Demo"><a href="#集成Mediasoup的客户端和服务端的Demo" class="headerlink" title="集成Mediasoup的客户端和服务端的Demo"></a>集成Mediasoup的客户端和服务端的Demo</h1><h2 id="1-构建Mediasoup、Mediasoup-client依赖"><a href="#1-构建Mediasoup、Mediasoup-client依赖" class="headerlink" title="1. 构建Mediasoup、Mediasoup-client依赖"></a>1. 构建Mediasoup、Mediasoup-client依赖</h2><ol><li>拉取服务端Mediasoup依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/versatica/mediasoup.git<br>git clone https://github.com/versatica/mediasoup-client.git<br></code></pre></td></tr></table></figure></li><li>编译构建服务端SDK  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd mediasoup &amp;&amp; npm install &amp;&amp; cd ..<br>cd mediasoup-client &amp;&amp; npm install &amp;&amp; cd ..<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-集成服务端和客户端Demo"><a href="#2-集成服务端和客户端Demo" class="headerlink" title="2. 集成服务端和客户端Demo"></a>2. 集成服务端和客户端Demo</h2><ol><li>拉取Demo工程  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/versatica/mediasoup-demo.git<br>cd mediasoup-demo<br></code></pre></td></tr></table></figure></li><li>导入SDK</li></ol><ul><li>去除工程中的Mediasoup、Mediasoup-Client依赖从Github下载的配置<ol><li>删除<code>app/package.json</code>中的如下整行内容；<br>  <code>&quot;mediasoup-client&quot;: &quot;github:versatica/mediasoup-client#v3&quot;,</code></li><li>删除<code>server/package.json</code>中的如下整行内容；<br>  <code>&quot;mediasoup&quot;: &quot;github:versatica/mediasoup#v3&quot;,</code></li></ol></li><li>安装其他依赖<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd app &amp;&amp; npm install --legacy-peer-deps &amp;&amp; cd ..<br>cd server &amp;&amp; npm install &amp;&amp; cd ..<br></code></pre></td></tr></table></figure></li><li>将我们手动编译构建的SDK移入Node依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r ../mediasoup ./server/node_modules<br><span class="hljs-built_in">cp</span> -r ../mediasoup-client ./app/node_modules<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>准备服务配置文件  <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">cd server<br>cp <span class="hljs-built_in">config</span>.example.<span class="hljs-keyword">js </span><span class="hljs-built_in">config</span>.<span class="hljs-keyword">js</span><br><span class="hljs-keyword"></span>cd ..<br></code></pre></td></tr></table></figure></li><li>为服务生成网站证书  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入存放证书的目录</span><br>cd serve &amp;&amp; mkdir certs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成证书（需要键入证书信息，如国家、城市、邮箱等）</span><br>openssl req -new -newkey rsa:2048 -x509 -sha256 -days 3650 -nodes -out fullchain.pem -keyout privkey.pem<br><span class="hljs-meta prompt_"># </span><span class="language-bash">回到Demo目录</span><br>cd ..<br></code></pre></td></tr></table></figure></li><li>添加环境变量  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">export DOMAIN=192.168.0.100<br>export MEDIASOUP_ANNOUNCED_IP=192.168.0.100<br></code></pre></td></tr></table></figure></li><li>启动服务端，保持终端以查看日志（若要后台运行，请学习使用<code>nohup</code>）  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd server<br>npm start<br></code></pre></td></tr></table></figure></li><li>启动客户端，保持终端以查看日志（若要后台运行，请学习使用<code>nohup</code>）  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd app<br>npm start<br></code></pre></td></tr></table></figure></li><li>通过使用<code>https://localhost:3000</code>或<code>http://IP地址:3000</code>来允许不检查证书访问，然后使用不同设备访问该地址，进入客户端，则不同设备之间即可进行实时音视频通话。</li></ol><p><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20230322235800.jpg"></p><blockquote><p>附录（报错提示）</p></blockquote><ol><li><code>npm install</code>过程报错如下：</li></ol><ul><li><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20230322222200.jpg"></li><li>解决：手动下载<code>worker/subprojects</code>中的每个wrap中的列出的资源放置在<code>worker/subprojects/packagecache</code>目录下后重试。</li></ul><h2 id="3-使用功能更齐全的Demo进行继续提升"><a href="#3-使用功能更齐全的Demo进行继续提升" class="headerlink" title="3. 使用功能更齐全的Demo进行继续提升"></a>3. 使用功能更齐全的Demo进行继续提升</h2><ul><li>多方会议系统<ul><li><a href="https://github.com/edumeet/edumeet.git">https://github.com/edumeet/edumeet.git</a></li></ul></li></ul><h1 id="集成Mediasoup的服务端录制Demo"><a href="#集成Mediasoup的服务端录制Demo" class="headerlink" title="集成Mediasoup的服务端录制Demo"></a>集成Mediasoup的服务端录制Demo</h1><h2 id="1-集成服务端和客户端Demo"><a href="#1-集成服务端和客户端Demo" class="headerlink" title="1. 集成服务端和客户端Demo"></a>1. 集成服务端和客户端Demo</h2><ol><li>拉取Demo工程  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/ethand91/mediasoup3-record-demo.git<br>cd mediasoup3-record-demo<br></code></pre></td></tr></table></figure></li><li>导入SDK</li></ol><ul><li>去除工程中的Mediasoup、Mediasoup-Client依赖从Github下载的配置<ol><li>删除<code>app/package.json</code>中的如下整行内容；<br>  <code>&quot;mediasoup-client&quot;: &quot;^3.6.48&quot;</code></li><li>删除<code>server/package.json</code>中的如下整行内容；<br>  <code>&quot;mediasoup&quot;: &quot;^3.9.5&quot;,</code></li></ol></li><li>安装其他依赖<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd app &amp;&amp; npm install &amp;&amp; cd ..<br>cd server &amp;&amp; npm install &amp;&amp; cd ..<br></code></pre></td></tr></table></figure></li><li>将我们手动编译构建的SDK移入Node依赖<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> -r ../mediasoup ./server/node_modules<br><span class="hljs-built_in">cp</span> -r ../mediasoup-client ./app/node_modules<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>为服务生成网站证书  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入存放证书的目录</span><br>cd serve/ssl<br><span class="hljs-meta prompt_"># </span><span class="language-bash">生成证书（需要键入证书信息，如国家、城市、邮箱等）</span><br>openssl req -new -newkey rsa:2048 -x509 -sha256 -days 3650 -nodes -out server.crt -keyout server.key<br><span class="hljs-meta prompt_"># </span><span class="language-bash">回到Demo目录</span><br>cd ..<br></code></pre></td></tr></table></figure></li><li>启动服务端，保持终端以查看日志（若要后台运行，请学习使用<code>nohup</code>）  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd server<br>npm start<br></code></pre></td></tr></table></figure></li><li>启动客户端，保持终端以查看日志（若要后台运行，请学习使用<code>nohup</code>）  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd app<br>npm run dev<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WebRTC</tag>
      
      <tag>Mediasoup</tag>
      
      <tag>NodeJS</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盘点Java开发中各式各样开箱即用的注解</title>
    <link href="/posts/30005/"/>
    <url>/posts/30005/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>注解</th><th>用途</th><th>备注</th></tr></thead><tbody><tr><td>@CrossOrigin</td><td>跨域(CORS)支持</td><td>SpringMVC-4.2或以上版本支持</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda+JupyterNotebook+Venv+GPU配置</title>
    <link href="/posts/30004/"/>
    <url>/posts/30004/</url>
    
    <content type="html"><![CDATA[<h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><ol><li>运行配置。</li></ol><ul><li>生成配置<code>jupyter_notebook_config.py</code>文件。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jupyter notebook --generate-config<br></code></pre></td></tr></table></figure></li><li>开启一个<code>ipython</code>窗口，生成密码哈希值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwd<br>passwd()<br></code></pre></td></tr></table></figure></li><li>访问生成的配置文件，修改配置文件<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">c.NotebookApp.ip = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>c.NotebookApp.port = <span class="hljs-number">26000</span><br>c.NotebookApp.open_browser = <span class="hljs-literal">False</span><br>c.NotebookApp.password = <span class="hljs-string">&#x27;【上一步生成的密码哈希值】&#x27;</span><br>c.NotebookApp.notebook_dir = <span class="hljs-string">&#x27;【希望的启动目录】&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>编写启动脚本<code>rjupyter</code>（可添加在环境变量），具有不重复启动、无多余日志功能。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">if test $( netstat -nltp | grep 26000 | wc -l ) -eq 0<br>then<br>nohup jupyter notebook &gt;/dev/null 2&gt;&amp;1 &amp;<br>fi<br></code></pre></td></tr></table></figure></li></ol><h2 id="依赖源"><a href="#依赖源" class="headerlink" title="依赖源"></a>依赖源</h2><ol><li>添加镜像源  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge <br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure></li><li>（可选）更新依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda upgrade --all<br></code></pre></td></tr></table></figure></li></ol><h2 id="内核切换"><a href="#内核切换" class="headerlink" title="内核切换"></a>内核切换</h2><ol><li>安装包<code>nb_conda</code>，重新启动<code>jupyter</code>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install nb_conda<br></code></pre></td></tr></table></figure></li><li>解决根目录重复导致的<code>jupyter-conda</code>页报错：修改<code>【Anaconda3安装目录】/pkgs/【nb_conda-2.2.1-py39hf3d152e_4】/lib/【python3.9】/site-packages/nb_conda/envmanager.py</code>文件,其中<code>【】</code>是可变的需要参考本机目录。</li></ol><ul><li>原文:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-string">&quot;environments&quot;</span>: [root_env] + [get_info(env) <span class="hljs-keyword">for</span> env <span class="hljs-keyword">in</span> info[<span class="hljs-string">&#x27;envs&#x27;</span>]]<br>&#125;<br></code></pre></td></tr></table></figure></li><li>修改后:  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> &#123;<br>  <span class="hljs-string">&quot;environments&quot;</span>: [root_env] + [get_info(env) <span class="hljs-keyword">for</span> env <span class="hljs-keyword">in</span> info[<span class="hljs-string">&#x27;envs&#x27;</span>] <span class="hljs-keyword">if</span> env != root_env[<span class="hljs-string">&#x27;dir&#x27;</span>]]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>在<code>LinuxShell</code>中查看已有虚拟环境.  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda info -e<br></code></pre></td></tr></table></figure></li><li>在<code>LinuxShell</code>中查看切换虚拟环境.  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate 【要切换的虚拟环境名】<br></code></pre></td></tr></table></figure></li></ol><h2 id="将自己创建的虚拟环境添加到Jupyter"><a href="#将自己创建的虚拟环境添加到Jupyter" class="headerlink" title="将自己创建的虚拟环境添加到Jupyter"></a>将自己创建的虚拟环境添加到Jupyter</h2><ol><li>创建虚拟环境。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n 虚拟环境名 python=3.6<br></code></pre></td></tr></table></figure></li><li>在此虚拟环境中安装内核。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda activate 虚拟环境名<br>conda install ipykernel<br>conda install nb_conda<br></code></pre></td></tr></table></figure></li><li>在<code>jupyter</code>的<code>Conda</code>中可见虚拟环境，若启动失败，则需要检查<code>pip list</code>和可用环境中的是否有依赖版本差异，着重检查跟<code>jupyter</code>有关的内容。</li></ol><h2 id="Pytroch-GPU"><a href="#Pytroch-GPU" class="headerlink" title="Pytroch+GPU"></a>Pytroch+GPU</h2><ol><li>使用<code>conda</code>源安装<code>pytorch</code>，它将会自动帮助我们匹配安装<code>cudatoolkit</code>。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install pytorch<br></code></pre></td></tr></table></figure></li><li>在<code>Jupyter</code>中运行如下代码，进行GPU加速测试：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pytorch版本[%s],CUDA是否可用[%s]&#x27;</span> % (torch.__version__, torch.cuda.is_available())) <span class="hljs-comment"># 返回pytorch的版本</span><br><br>a = torch.randn(<span class="hljs-number">10000</span>, <span class="hljs-number">1000</span>)    <span class="hljs-comment"># 返回10000行1000列的张量矩阵</span><br>b = torch.randn(<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>)     <span class="hljs-comment"># 返回1000行2000列的张量矩阵</span><br><br><span class="hljs-comment"># 直接CPU计算</span><br>t0 = time.time()<br>c = torch.matmul(a, b)<br>t1 = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]运行时间[%s]，运行结果[%s]&#x27;</span> % (a.device, t1 - t0, c.norm(<span class="hljs-number">2</span>)))<br><br><span class="hljs-comment"># 指定GPU计算（数据未压入CUDA，包含初始化）</span><br>device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>a = a.to(device)<br>b = b.to(device)<br>t0 = time.time()<br>c = torch.matmul(a, b)<br>t2 = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]运行时间[%s](含CUDA初始化），运行结果[%s]&#x27;</span> % (a.device, t2 - t0, c.norm(<span class="hljs-number">2</span>)))<br><br><span class="hljs-comment"># 指定GPU计算（数据已压入CUDA，不含初始化，仅计算时间）</span><br>t0 = time.time()<br>c = torch.matmul(a, b)<br>t3 = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]运行时间[%s](不含CUDA初始化），运行结果[%s]&#x27;</span> % (a.device, t3 - t0, c.norm(<span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure></li></ol><h2 id="jupyter-contrib-nbextensions"><a href="#jupyter-contrib-nbextensions" class="headerlink" title="jupyter_contrib_nbextensions"></a>jupyter_contrib_nbextensions</h2><ol><li>通过以下命令安装<code>jupyter</code>和启用扩展配置。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install jupyter_contrib_nbextensions<br>jupyter contrib nbextension install --user<br>pip install jupyter_nbextensions_configurator<br>jupyter nbextensions_configurator enable --user<br></code></pre></td></tr></table></figure></li><li>根据需要在<code>Nbextensions</code>开启扩展。</li></ol><ul><li><code>Table of Contents (2)</code> 笔记本目录</li><li><code>Collapsible Headings</code> 笔记本目录折叠</li><li><code>Codefolding</code> 代码折叠</li><li><code>Hinterland</code> 代码编辑提示</li></ul>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Anaconda</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda+JupyterLab+Venv+GPU配置</title>
    <link href="/posts/30006/"/>
    <url>/posts/30006/</url>
    
    <content type="html"><![CDATA[<h2 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h2><ol><li>运行配置。</li></ol><ul><li>生成配置<code>jupyter_lab_config.py</code>文件。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jupyter lab --generate-config<br></code></pre></td></tr></table></figure></li><li>开启一个<code>ipython</code>窗口，生成密码哈希值<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> notebook.auth <span class="hljs-keyword">import</span> passwd<br>passwd()<br></code></pre></td></tr></table></figure></li><li>访问生成的配置文件，目录为<code>用户目录/.jupyter/jupyter_lab_config.py</code>，修改配置文件<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs py">c.ServerApp.ip = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>c.ServerApp.port = <span class="hljs-number">26000</span><br>c.ServerApp.open_browser = <span class="hljs-literal">False</span><br>c.ServerApp.password = <span class="hljs-string">&#x27;【上一步生成的密码哈希值】&#x27;</span><br>c.ServerApp.notebook_dir = <span class="hljs-string">&#x27;【希望的启动目录】&#x27;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="2"><li>编写启动脚本<code>rjupyter</code>（可添加在环境变量），具有不重复启动、无多余日志功能。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">if test $( netstat -nltp | grep 26000 | wc -l ) -eq 0<br>then<br>nohup jupyter lab &gt;/dev/null 2&gt;&amp;1 &amp;<br>fi<br></code></pre></td></tr></table></figure></li></ol><h2 id="依赖源"><a href="#依赖源" class="headerlink" title="依赖源"></a>依赖源</h2><ol><li>添加镜像源  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge <br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/<br>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/<br>conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure></li><li>（可选）更新依赖  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda upgrade --all<br></code></pre></td></tr></table></figure></li></ol><h2 id="内核切换"><a href="#内核切换" class="headerlink" title="内核切换"></a>内核切换</h2><h2 id="将自己创建的虚拟环境添加到Jupyter"><a href="#将自己创建的虚拟环境添加到Jupyter" class="headerlink" title="将自己创建的虚拟环境添加到Jupyter"></a>将自己创建的虚拟环境添加到Jupyter</h2><ol><li>安装内核自动管理工具  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install nb_conda_kernels<br></code></pre></td></tr></table></figure></li><li>创建虚拟环境。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda create -n 虚拟环境名 python=3.6 ipykernel<br></code></pre></td></tr></table></figure></li><li>在JupyterLab中选择虚拟环境名称对应的内核即可。</li></ol><h2 id="Pytroch-GPU"><a href="#Pytroch-GPU" class="headerlink" title="Pytroch+GPU"></a>Pytroch+GPU</h2><ol><li>使用<code>conda</code>源安装<code>pytorch</code>，它将会自动帮助我们匹配安装<code>cudatoolkit</code>。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">conda install pytorch<br></code></pre></td></tr></table></figure></li><li>在<code>Jupyter</code>中运行如下代码，进行GPU加速测试：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;pytorch版本[%s],CUDA是否可用[%s]&#x27;</span> % (torch.__version__, torch.cuda.is_available())) <span class="hljs-comment"># 返回pytorch的版本</span><br><br>a = torch.randn(<span class="hljs-number">10000</span>, <span class="hljs-number">1000</span>)    <span class="hljs-comment"># 返回10000行1000列的张量矩阵</span><br>b = torch.randn(<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>)     <span class="hljs-comment"># 返回1000行2000列的张量矩阵</span><br><br><span class="hljs-comment"># 直接CPU计算</span><br>t0 = time.time()<br>c = torch.matmul(a, b)<br>t1 = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]运行时间[%s]，运行结果[%s]&#x27;</span> % (a.device, t1 - t0, c.norm(<span class="hljs-number">2</span>)))<br><br><span class="hljs-comment"># 指定GPU计算（数据未压入CUDA，包含初始化）</span><br>device = torch.device(<span class="hljs-string">&#x27;cuda&#x27;</span>)<br>a = a.to(device)<br>b = b.to(device)<br>t0 = time.time()<br>c = torch.matmul(a, b)<br>t2 = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]运行时间[%s](含CUDA初始化），运行结果[%s]&#x27;</span> % (a.device, t2 - t0, c.norm(<span class="hljs-number">2</span>)))<br><br><span class="hljs-comment"># 指定GPU计算（数据已压入CUDA，不含初始化，仅计算时间）</span><br>t0 = time.time()<br>c = torch.matmul(a, b)<br>t3 = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]运行时间[%s](不含CUDA初始化），运行结果[%s]&#x27;</span> % (a.device, t3 - t0, c.norm(<span class="hljs-number">2</span>)))<br></code></pre></td></tr></table></figure></li></ol><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><ol><li>简体中文界面  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install jupyterlab-language-pack-zh-CN<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Anaconda</tag>
      
      <tag>Jupyter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows+WSL2自建专属个人服务器</title>
    <link href="/posts/20003/"/>
    <url>/posts/20003/</url>
    
    <content type="html"><![CDATA[<blockquote><p>通过启用Windows10或者Windows11中的WSL2的Ubuntu，在Ubuntu中构建一个属于自己的Linux服务器。</p></blockquote><h1 id="宿主计算机配置"><a href="#宿主计算机配置" class="headerlink" title="宿主计算机配置"></a>宿主计算机配置</h1><h2 id="开启WSL2"><a href="#开启WSL2" class="headerlink" title="开启WSL2"></a>开启WSL2</h2><ol><li>通过Windows的“启用或关闭Windows功能”开启Linux子系统功能：</li></ol><ul><li>勾选“适用于Linux的Windows子系统”</li><li>勾选“虚拟机平台”<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220329083615.png" alt="启用或关闭Windows功能"></li></ul><ol start="2"><li>配置WSL使用的版本为WSL2。</li></ol><ul><li>安装<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">WSL2内核</a></li><li>在PowerShell中运行命令：<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">wsl <span class="hljs-literal">--set-default-version</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li>通过Windows的“应用商店”安装如下内容：</li></ol><ul><li>安装“Ubuntu”<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220329084250.png" alt="应用商店"></li></ul><h2 id="WSL自启动"><a href="#WSL自启动" class="headerlink" title="WSL自启动"></a>WSL自启动</h2><ol><li>在Windows用户开机启动目录中添加<code>C:\Users\用户名\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code>文件<code>linux-start.vbs</code>，文件内容如下：  <figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vb"><span class="hljs-keyword">Set</span> ws = WScript.CreateObject(<span class="hljs-string">&quot;WScript.Shell&quot;</span>)        <br>ws.run <span class="hljs-string">&quot;wsl -d Ubuntu -u root /etc/init.wsl&quot;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>上述文件内容包含如下信息：<ul><li>指定<code>linux-start.vbs</code>为Windows启动时运行的程序；</li><li><code>vbs</code>中运行<code>Ubuntu</code>的WSL内的<code>/etc/init.wsl</code>，指定<code>-u root</code>执行运行的用户。</li><li><code>vbs</code>中运行<code>Ubuntu</code>的WSL内的<code>/etc/init.wsl</code>，所以，我们需要提前在WSL2中创建好该文件，内容为需要开机启动的项目）。</li></ul></li></ul><h2 id="端口监听"><a href="#端口监听" class="headerlink" title="端口监听"></a>端口监听</h2><ol><li>通过Windows自带的<code>netsh</code>工具的端口代理功能，可以讲将WSL2的内部监听端口作用在宿主计算机上，达到端口转发的效果。    <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 查看所有端口代理</span><br>netsh interface portproxy show all<br><span class="hljs-comment"># 增加一个IPV4到IPV4的端口代理</span><br>netsh interface portproxy add v4tov4 listenport=外部端口 connectaddress=localhost connectport=内部端口<br><span class="hljs-comment"># 增加一个IPV4到IPV6的端口代理</span><br>netsh interface portproxy add v4tov6 listenport=外部端口 connectaddress=localhost connectport=内部端口<br><span class="hljs-comment"># 删除指定的端口代理</span><br>netsh interface portproxy delete v4tov4 listenport=外部端口<br></code></pre></td></tr></table></figure></li></ol><h2 id="释放磁盘"><a href="#释放磁盘" class="headerlink" title="释放磁盘"></a>释放磁盘</h2><ol><li>由于WSL2的特殊设计，其使用过的磁盘空间需要<strong>宿主计算机</strong>中通过如下命令才可以真正释放。  <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 关闭虚拟机</span><br>wsl <span class="hljs-literal">--terminate</span> Ubuntu<br></code></pre></td></tr></table></figure></li><li>通过<code>Powershell</code>运行<code>diskpart</code>进入磁盘管理工具命令行内，再输入如下内容进行磁盘压缩  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">select vdisk file=&quot;C:\Users\【用户名】\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu_79rhkp1fndgsc\LocalState\ext4.vhdx&quot;<br>compact vdisk<br></code></pre></td></tr></table></figure></li></ol><h2 id="可选）显卡驱动（NVIDIA-CUDA）"><a href="#可选）显卡驱动（NVIDIA-CUDA）" class="headerlink" title="(可选）显卡驱动（NVIDIA + CUDA）"></a>(可选）显卡驱动（NVIDIA + CUDA）</h2><ol><li>下载并安装<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">英伟达官方显卡驱动</a></li></ol><h1 id="WSL配置"><a href="#WSL配置" class="headerlink" title="WSL配置"></a>WSL配置</h1><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><ol><li>安装OpenSSH <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt autoremove openssh-server<br>sudo apt install openssh-server<br></code></pre></td></tr></table></figure></li><li>配置OpenSSH</li></ol><ul><li>编辑文件<code>/etc/ssh/sshd_config</code>的如下配置：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs conf"># 将监听端口定在222用于将22预留给宿主计算机暴露给外部网络<br>Port 222<br># 在IPV4上进行监听<br>ListenAddress 0.0.0.0<br># 允许公钥进行登录<br>PubkeyAuthentication yes<br># 允许密码进行登录<br>PasswordAuthentication yes<br># 指定公钥存储目录<br>AuthorizedKeysFile .ssh/authorized_keys<br></code></pre></td></tr></table></figure></li><li>重新启动服务。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service ssh restart<br></code></pre></td></tr></table></figure></li><li>（可选）在可信设备中，通过<code>ssh-copy-id</code>将公钥传入WSL配置免密登录。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-copy-id 用户名@地址 -p 端口<br></code></pre></td></tr></table></figure></li><li>编辑<code>/etc/init.wsl</code>，将启动SSH作添加到Windows开机自启动脚本中。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br>/etc/init.d/ssh start<br></code></pre></td></tr></table></figure></li></ul><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol><li>下载<a href="https://mirrors.tuna.tsinghua.edu.cn/AdoptOpenJDK/11/jdk/x64/linux/OpenJDK11U-jdk_x64_linux_hotspot_11.0.14.1_1.tar.gz">OpenJDK11</a>并解压。</li><li>添加环境变量到<code>.bashrc</code>。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">OpenJDK11</span><br>export PATH=$PATH:/home/zsj/Desktop/00-DevBuild/jdk-11.0.14.1+1/bin<br></code></pre></td></tr></table></figure></li><li>修改 <code>Maven</code>的<code>setting.xml</code>依赖源为阿里云镜像  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="Anaconda（Python）"><a href="#Anaconda（Python）" class="headerlink" title="Anaconda（Python）"></a>Anaconda（Python）</h2><ol><li>下载<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.11-Linux-x86_64.sh">Anaconda3</a>运行安装，在安装阶段已经包含添加环境变量的配置。</li></ol><h2 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h2><ol><li>下载<a href="https://mirrors.tuna.tsinghua.edu.cn/nodejs-release/v16.14.2/node-v16.14.2-linux-x64.tar.xz">NodeJS16</a>并解压。</li><li>添加环境变量到<code>.bashrc</code>。  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">NodeJS16</span><br>export PATH=$PATH:/home/zsj/Desktop/00-DevBuild/node-v16.14.2-linux-x64/bin<br></code></pre></td></tr></table></figure></li><li>修改<code>npm</code>的依赖源为淘宝镜像  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry http://registry.npm.taobao.org/<br></code></pre></td></tr></table></figure></li></ol><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ol><li>通过<code>ssh-keygen-t</code>生成密钥对  <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh-keygen -t rsa</span><br></code></pre></td></tr></table></figure></li><li>读出<code>~/.ssh/id_rsa.pub</code>内的公钥，将其添加到Github账户中<br>  <img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220329104826.png" alt="Github公钥"></li><li>配置Git本地作者信息  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name &quot;zhongshijie&quot;<br>git config --global user.email &quot;zhongshijie1995@outlook.com&quot;<br></code></pre></td></tr></table></figure></li></ol><h2 id="运行exe在宿主计算机上"><a href="#运行exe在宿主计算机上" class="headerlink" title="运行exe在宿主计算机上"></a>运行exe在宿主计算机上</h2><ol><li>WSL2在执行<code>.exe</code>文件时会自动使用宿主计算机Windows来运行，所以要想运行宿主计算机的应用程序，直接运行它即可：  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建一个快捷方式在WSL中</span><br>ln -s &#x27;/mnt/c/Program Files (x86)/ToDesk/ToDesk.exe&#x27; /home/zsj/WindowsApp/ToDesk.exe<br><span class="hljs-meta prompt_"># </span><span class="language-bash">直接运行快捷方式</span><br>/home/zsj/WindowsApp/ToDesk.exe<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>WSL2</tag>
      
      <tag>CUDA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Github中搭建项目CI/CD流水线</title>
    <link href="/posts/20001/"/>
    <url>/posts/20001/</url>
    
    <content type="html"><![CDATA[<p>在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。 您可以发现、创建和共享操作以执行您喜欢的任何作业（包括 CI&#x2F;CD），并将操作合并到完全自定义的工作流程中。让你的Github仓库中提交代码拉取请求后能自动的单元测试、通过代码覆盖率门禁、自动的部署测试和生产，并可以提供精美的发版说明。<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220304002810.png"><br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220304003343.png"></p><blockquote><p>对于Github Action最好的学习使用方法，我推荐直接从套用世杰提供的<code>DevOps</code>模版开始，假如填写时有地方看不懂，再查看<a href="https://docs.github.com/cn/actions">官方文档</a></p></blockquote><h1 id="基于Springboot的应用程序持续集成-发布模版"><a href="#基于Springboot的应用程序持续集成-发布模版" class="headerlink" title="基于Springboot的应用程序持续集成+发布模版"></a>基于Springboot的应用程序持续集成+发布模版</h1><ol><li><p>在你的项目目录下创建如下目录结构，其中<code>.github</code>即是你的持续集成+发布流水线的配置文件<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220304001610.png" alt="文件结构"></p></li><li><p>填写持续集成流水线<code>CICD for PR.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">CICD</span> <span class="hljs-string">for</span> <span class="hljs-string">PR</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">pull_request:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">main</span> ]<br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span> [ <span class="hljs-string">main</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># 准备步骤</span><br>  <span class="hljs-attr">prepare:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">myhost:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.get-my-host.outputs.host_ip</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">get-my-host</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;::set-output name=host_ip::$(curl https://zhongshijie1995.github.io/about/ | grep -m1 -o &quot;</span><span class="hljs-string">【.*】&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">tr</span> <span class="hljs-string">-d</span> [<span class="hljs-string">&#x27;【】&#x27;</span>]<span class="hljs-string">)&quot;</span><br>  <span class="hljs-comment"># 构建步骤</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-comment"># 运行环境</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-comment"># 前置步骤</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">prepare</span><br>    <span class="hljs-comment"># 执行步骤</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 打印我的地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Print</span> <span class="hljs-string">my</span> <span class="hljs-string">host</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.prepare.outputs.myhost</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-comment"># 拉取代码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-comment"># 设置构建参数</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">JDK</span> <span class="hljs-number">11</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">java-version:</span> <span class="hljs-string">&#x27;11&#x27;</span><br>          <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;temurin&#x27;</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">maven</span><br>      <span class="hljs-comment"># 通过maven clean install构建</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">Maven</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">-B</span> <span class="hljs-string">clean</span> <span class="hljs-string">install</span><br>      <span class="hljs-comment"># 生成单元测试报告（always）</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JUnit</span> <span class="hljs-string">Report</span> <span class="hljs-string">Action</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">mikepenz/action-junit-report@v2.8.4</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">always()</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">report_paths:</span> <span class="hljs-string">&#x27;**/TEST-*.xml&#x27;</span><br>      <span class="hljs-comment"># 生成覆盖率到拉取请求的评论区</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Add</span> <span class="hljs-string">coverage</span> <span class="hljs-string">to</span> <span class="hljs-string">PR</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">jacoco</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">madrapps/jacoco-report@v1.2</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;pull_request&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">paths:</span> <span class="hljs-string">target/site/jacoco/jacoco.xml</span><br>          <span class="hljs-attr">token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">min-coverage-overall:</span> <span class="hljs-number">90</span><br>          <span class="hljs-attr">min-coverage-changed-files:</span> <span class="hljs-number">90</span><br>      <span class="hljs-comment"># 加入发版草稿</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Add</span> <span class="hljs-string">release</span> <span class="hljs-string">draft</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">release-drafter/release-drafter@v5</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITHUB_TOKEN</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-comment"># 上传构件和部署脚本</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">scp</span> <span class="hljs-string">jar</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">deploy.sh</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">cross-the-world/ssh-scp-ssh-pipelines@latest</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;push&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.prepare.outputs.myhost</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_USER</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">pass:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">scp:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            ./target/big_boot-*.jar =&gt; /home/$&#123;&#123; secrets.DEEPIN_USER &#125;&#125;/Desktop/00-SystemTest/big_boot/</span><br><span class="hljs-string">            deploy.sh =&gt; /home/$&#123;&#123; secrets.DEEPIN_USER &#125;&#125;/Desktop/00-SystemTest/big_boot/</span><br><span class="hljs-string"></span>      <span class="hljs-comment"># 执行部署脚本</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">cross-the-world/ssh-scp-ssh-pipelines@latest</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">github.event_name</span> <span class="hljs-string">==</span> <span class="hljs-string">&#x27;push&#x27;</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.prepare.outputs.myhost</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_USER</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">pass:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">last_ssh:</span> <span class="hljs-string">|</span><br>            <span class="hljs-string">cd</span> <span class="hljs-string">/home/$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_USER</span> <span class="hljs-string">&#125;&#125;/Desktop/00-SystemTest/big_boot</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sh</span> <span class="hljs-string">deploy.sh</span> <span class="hljs-string">02_sys_test</span><br></code></pre></td></tr></table></figure></li><li><p>填写持续部署流水线<code>CD for release.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">CD</span> <span class="hljs-string">for</span> <span class="hljs-string">release</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">release:</span><br>    <span class="hljs-attr">types:</span> [ <span class="hljs-string">published</span> ]<br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-comment"># 准备步骤</span><br>  <span class="hljs-attr">prepare:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">outputs:</span><br>      <span class="hljs-attr">myhost:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">steps.get-my-host.outputs.host_ip</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">get-my-host</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;::set-output name=host_ip::$(curl https://zhongshijie1995.github.io/about/ | grep -m1 -o &quot;</span><span class="hljs-string">【.*】&quot;</span> <span class="hljs-string">|</span> <span class="hljs-string">tr</span> <span class="hljs-string">-d</span> [<span class="hljs-string">&#x27;【】&#x27;</span>]<span class="hljs-string">)&quot;</span><br>  <span class="hljs-comment"># 构建步骤</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-comment"># 运行环境</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-comment"># 前置步骤</span><br>    <span class="hljs-attr">needs:</span> <span class="hljs-string">prepare</span><br>    <span class="hljs-comment"># 执行步骤</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 打印我的地址</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Print</span> <span class="hljs-string">my</span> <span class="hljs-string">host</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">echo</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.prepare.outputs.myhost</span> <span class="hljs-string">&#125;&#125;</span><br>      <span class="hljs-comment"># 拉取代码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>      <span class="hljs-comment"># 设置构建参数</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Set</span> <span class="hljs-string">up</span> <span class="hljs-string">JDK</span> <span class="hljs-number">11</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-java@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">java-version:</span> <span class="hljs-string">&#x27;11&#x27;</span><br>          <span class="hljs-attr">distribution:</span> <span class="hljs-string">&#x27;temurin&#x27;</span><br>          <span class="hljs-attr">cache:</span> <span class="hljs-string">maven</span><br>      <span class="hljs-comment"># 通过maven clean install构建</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">Maven</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">mvn</span> <span class="hljs-string">-B</span> <span class="hljs-string">clean</span> <span class="hljs-string">package</span><br>      <span class="hljs-comment"># 上传构件和部署脚本</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">scp</span> <span class="hljs-string">jar</span> <span class="hljs-string">&amp;</span> <span class="hljs-string">deploy.sh</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">cross-the-world/ssh-scp-ssh-pipelines@latest</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.prepare.outputs.myhost</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_USER</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">pass:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">scp:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            ./target/big_boot-*.jar =&gt; /home/$&#123;&#123; secrets.DEEPIN_USER &#125;&#125;/Desktop/00-Production/big_boot/</span><br><span class="hljs-string">            deploy.sh =&gt; /home/$&#123;&#123; secrets.DEEPIN_USER &#125;&#125;/Desktop/00-Production/big_boot/</span><br><span class="hljs-string"></span>      <span class="hljs-comment"># 执行部署脚本</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">cross-the-world/ssh-scp-ssh-pipelines@latest</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">host:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">needs.prepare.outputs.myhost</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">user:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_USER</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">pass:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">last_ssh:</span> <span class="hljs-string">|</span><br>            <span class="hljs-string">cd</span> <span class="hljs-string">/home/$&#123;&#123;</span> <span class="hljs-string">secrets.DEEPIN_USER</span> <span class="hljs-string">&#125;&#125;/Desktop/00-Production/big_boot</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">sh</span> <span class="hljs-string">deploy.sh</span> <span class="hljs-string">03_prod</span><br></code></pre></td></tr></table></figure></li><li><p>填写发布草稿配置<code>release-drafter.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name-template:</span> <span class="hljs-string">&#x27;v$RESOLVED_VERSION 🌈&#x27;</span><br><span class="hljs-attr">tag-template:</span> <span class="hljs-string">&#x27;v$RESOLVED_VERSION&#x27;</span><br><span class="hljs-attr">categories:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;🚀 Features&#x27;</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;feature&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;enhancement&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;🐛 Bug Fixes&#x27;</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;fix&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;bugfix&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;bug&#x27;</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">&#x27;🧰 Maintenance&#x27;</span><br>    <span class="hljs-attr">label:</span> <span class="hljs-string">&#x27;chore&#x27;</span><br><span class="hljs-attr">change-template:</span> <span class="hljs-string">&#x27;- $TITLE @$AUTHOR (#$NUMBER)&#x27;</span><br><span class="hljs-attr">change-title-escapes:</span> <span class="hljs-string">&#x27;\&lt;*_&amp;&#x27;</span> <span class="hljs-comment"># You can add # and @ to disable mentions, and add ` to disable code blocks.</span><br><span class="hljs-attr">version-resolver:</span><br>  <span class="hljs-attr">major:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;major&#x27;</span><br>  <span class="hljs-attr">minor:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;minor&#x27;</span><br>  <span class="hljs-attr">patch:</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;patch&#x27;</span><br>  <span class="hljs-attr">default:</span> <span class="hljs-string">patch</span><br><span class="hljs-attr">template:</span> <span class="hljs-string">|</span><br><span class="hljs-string">  ## Changes</span><br><span class="hljs-string"></span><br>  <span class="hljs-string">$CHANGES</span><br></code></pre></td></tr></table></figure></li><li><p>最后，进入你的Github仓库页面，在此处配置你的隐私变量，对应上述CI&#x2F;CD的流水线中的<code>$&#123;&#123; secrets.XXXX &#125;&#125;</code>变量<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220304003601.png"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DevOps</tag>
      
      <tag>Github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python+Selenium网页操作自动化</title>
    <link href="/posts/20002/"/>
    <url>/posts/20002/</url>
    
    <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><h2 id="1-1-无人值守的需要"><a href="#1-1-无人值守的需要" class="headerlink" title="1.1 无人值守的需要"></a>1.1 无人值守的需要</h2><p>日常工作生活中，有很多令人厌烦的、必须要进行的网页操作，每次都需要我们输入一些信息，进行千篇一律的点按操作，毫无技术含量却还要我们专程进行，我们希望有一个定时任务帮自动我们完成，例如：网页打卡、签到领奖……</p><p><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20200919204534.png" alt="登录操作"></p><h2 id="1-2-频繁无趣的解放"><a href="#1-2-频繁无趣的解放" class="headerlink" title="1.2 频繁无趣的解放"></a>1.2 频繁无趣的解放</h2><p>在博客等部署在Gitee Pages中的同学们都知道，将静态资源推送到了Gitee仓库中后是不会自动刷新的，它需要我们手动进入到仓库的GiteePages中点击更新才能将博客的最新内容发布，由于每次更新博客，都需要进行这样的操作，频繁而无趣。</p><p><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20200919204533.png" alt="GiteePage服务的更新页面"></p><h2 id="1-3-用Python来完成它！"><a href="#1-3-用Python来完成它！" class="headerlink" title="1.3 用Python来完成它！"></a>1.3 用Python来完成它！</h2><p>接下来，我们来一步一步的学习如何用Python+Selenium让这个过程实现自动化，学有所成的你甚至可以完成更多更难的自动化场景……至于Python和Selenium是什么？这里假设你已经有所了解，或者你可以现在去搜索了解一下。</p><h1 id="2-学习自动化"><a href="#2-学习自动化" class="headerlink" title="2. 学习自动化"></a>2. 学习自动化</h1><h2 id="2-1-准备驱动"><a href="#2-1-准备驱动" class="headerlink" title="2.1 准备驱动"></a>2.1 准备驱动</h2><p>首先，我们需要为自己的浏览器寻找一个驱动，这个驱动需要放在Python运行时能够查找到的位置。</p><p>下面，我将以我使用的新版MicroSoft Edge浏览器为例进行讲解：</p><ol><li>通过网络渠道找到符合自己电脑中浏览器的 操作系统+品牌+版本 的浏览器驱动，例如我通过MicroSoft Edge官方的<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/">开发者网站</a>查找并获取浏览器驱动。</li><li>将驱动放置在Python运行时能够查找到的位置，案例中我放在了<code>/usr/local/bin</code>目录下。</li></ol><h2 id="2-2-掌握Selenium的基本用法"><a href="#2-2-掌握Selenium的基本用法" class="headerlink" title="2.2 掌握Selenium的基本用法"></a>2.2 掌握Selenium的基本用法</h2><p>Selenium的使用通常包括3个步骤：</p><ol><li><p>获得浏览器控制器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><br>service = Service(<span class="hljs-string">&#x27;/usr/local/bin/MicrosoftWebDriver&#x27;</span>)<br>service.start()<br>dr = webdriver.Remote(service.service_url)<br></code></pre></td></tr></table></figure><p>上述代码（仅适用于新版MicroSoft Edge浏览器）通过指定驱动获取到了浏览器控制器。如果你使用的是其他浏览器，不用担心，因为只会更简单，例如火狐浏览器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>dr = webdriver.Firefox()<br></code></pre></td></tr></table></figure><p>不同浏览器的代码可以通过Seleunium的文档得到。</p></li><li><p>操作浏览器访问某个网址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">dr.get(<span class="hljs-string">&#x27;https://baidu.com&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述代码将使得被启动的浏览器访问指定的网址，就是那么简单。</p></li><li><p>对浏览器的元素进行操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">   a = dr.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;user_login&quot;]&#x27;</span>)<br>   a.click()<br>a.send_keys(<span class="hljs-string">&#x27;zhongshijie&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述代码在当前网页中，通过XPath查找到一个元素，进行了一次点击，并传入了值，同样是那么简单。</p></li></ol><p>如果你备好<a href="https://python-selenium-zh.readthedocs.io/zh_CN/latest/">Selenium文档</a>并随时查看，你会发现它能够如此优雅简单的指定你能想到的一切对浏览器的操作，运行代码，它将自动按照你的指示操作浏览器。</p><h1 id="3-示例代码"><a href="#3-示例代码" class="headerlink" title="3. 示例代码"></a>3. 示例代码</h1><p>最后，提供一份第1节中提到的自动更新部署在GiteePages的博客的完整代码，执行这段代码，它将会自动帮我完成已经推送到仓库的博客内容的更新，希望达到抛砖引玉的效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> selenium.webdriver.common.alert <span class="hljs-keyword">import</span> Alert<br><br><span class="hljs-comment"># Driver path config</span><br>driver_path = <span class="hljs-string">&#x27;/usr/local/bin/MicrosoftWebDriver&#x27;</span><br><br><span class="hljs-comment"># Gitee user</span><br>user_name = <span class="hljs-string">&#x27;Gitee用户名&#x27;</span><br>user_pwd = <span class="hljs-string">&#x27;Gitee用户密码&#x27;</span><br><br><span class="hljs-comment"># Gitee pages urls</span><br>gitee_page_urls = &#123;<br>    <span class="hljs-string">&#x27;zhongshijie&#x27;</span>: <span class="hljs-string">&#x27;https://gitee.com/zhongshijie/zhongshijie/pages&#x27;</span>,<br>    <span class="hljs-string">&#x27;mirrors-pic&#x27;</span>: <span class="hljs-string">&#x27;https://gitee.com/zhongshijie/mirrors-pic/pages&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login_gitee</span>(<span class="hljs-params">_us: <span class="hljs-built_in">str</span>, _pwd: <span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>, <span class="hljs-string">&#x27;开始登录gitee&#x27;</span>, <span class="hljs-string">&#x27;----------&#x27;</span>)<br>    dr.get(<span class="hljs-string">&#x27;https://gitee.com/login&#x27;</span>)<br>    dr.implicitly_wait(<span class="hljs-number">10</span>)<br>    user_name_field = dr.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;user_login&quot;]&#x27;</span>)<br>    user_pwd_field = dr.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;user_password&quot;]&#x27;</span>)<br>    user_login_btn = dr.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;new_user&quot;]/div[2]/div/div/div[4]/input&#x27;</span>)<br>    user_name_field.send_keys(_us)<br>    user_pwd_field.send_keys(_pwd)<br>    user_login_btn.click()<br>    dr.implicitly_wait(<span class="hljs-number">10</span>)<br>    dr.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;rc-users__container&quot;]/div[1]/div[2]/div/div[1]/div[1]/div[1]/div[1]/strong/a&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">deploy_all</span>():<br>    <span class="hljs-keyword">for</span> gitee_page_name, gitee_page_url <span class="hljs-keyword">in</span> gitee_page_urls.items():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;----------&#x27;</span>,  <span class="hljs-string">&#x27;更新部署&#x27;</span>， gitee_page_name, <span class="hljs-string">&#x27;----------&#x27;</span>)<br>        dr.get(gitee_page_url)<br>        dr.implicitly_wait(<span class="hljs-number">10</span>)<br>        deploy_update = dr.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;pages-branch&quot;]/div[7]&#x27;</span>)<br>        deploy_update.click()<br>        Alert(dr).accept()<br>        time.sleep(<span class="hljs-number">3</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <br>    <span class="hljs-comment"># Get browser by driver path</span><br>    service = Service(driver_path)<br>    service.start()<br>    dr = webdriver.Remote(service.service_url)<br><br>    <span class="hljs-comment"># Deploy</span><br>    <span class="hljs-keyword">try</span>:<br>        login_gitee(user_name, user_pwd)<br>        deploy_all()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Login Failed&#x27;</span>, e)<br><br>    <span class="hljs-comment"># Quit browser</span><br>    dr.quit()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Selenium</tag>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot @Autowired 失效</title>
    <link href="/posts/30002/"/>
    <url>/posts/30002/</url>
    
    <content type="html"><![CDATA[<h1 id="1-可能性一：new产生的问题"><a href="#1-可能性一：new产生的问题" class="headerlink" title="1. 可能性一：new产生的问题"></a>1. 可能性一：new产生的问题</h1><h2 id="1-1-案例分析"><a href="#1-1-案例分析" class="headerlink" title="1.1 案例分析"></a>1.1 案例分析</h2><p>首先，我们准备了一个简单的示例（HelloController.class）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zsj.springbootmerge.helloworld;<br><br><span class="hljs-keyword">import</span> com.zsj.springbootmerge.helloworld.mapper.HelloWorldMapper;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/hello-world&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloWorldMapper helloWorldMapper;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/say&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World, &quot;</span> + (name == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;No Name&quot;</span> : name);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/list&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">list</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        helloWorldMapper.selectList(<span class="hljs-literal">null</span>).forEach(item -&gt; result.append(item.toString()));<br>        <span class="hljs-keyword">return</span> result.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，我们希望编写一个利用MockMvc的单元测试来对这个上述的两个方法进行测试，于是准备了一个示例（HelloWorldControllerTest.class）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zsj.springbootmerge.helloworld;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldControllerTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MockMvc</span> <span class="hljs-variable">mockMvc</span> <span class="hljs-operator">=</span> MockMvcBuilders.standaloneSetup(<span class="hljs-keyword">new</span> <span class="hljs-title class_">helloWorldController</span>()).build();<br>        mockMvc.perform(<br>                MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hello-world/say&quot;</span>)<br>                        .param(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zhongshijie&quot;</span>)<br>                        .accept(MediaType.APPLICATION_JSON)<br>        ).andExpect(<br>                MockMvcResultMatchers.status().isOk()<br>        ).andDo(<br>                MockMvcResultHandlers.print()<br>        ).andReturn();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MockMvc</span> <span class="hljs-variable">mockMvc</span> <span class="hljs-operator">=</span> MockMvcBuilders.standaloneSetup(<span class="hljs-keyword">new</span> <span class="hljs-title class_">elloWorldController</span>()).build();<br>        mockMvc.perform(<br>                MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hello-world/list&quot;</span>)<br>                        .accept(MediaType.APPLICATION_JSON)<br>        ).andExpect(<br>                MockMvcResultMatchers.status().isOk()<br>        ).andDo(<br>                MockMvcResultHandlers.print()<br>        ).andReturn();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>咋一看，这么写的代码很普通。但是运行单元测试的代码，你会发现测试案例中的<code>say()</code>能够正常运行，而<code>list()</code>却会抛出<code>helloWorldMapper</code>为空的问题。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">org.springframework.web.util.NestedServletException: </span>Request processing failed<span class="hljs-comment">; nested exception is java.lang.NullPointerException: Cannot invoke &quot;com.zsj.springbootmerge.helloworld.mapper.HelloWorldMapper.selectList(com.baomidou.mybatisplus.core.conditions.Wrapper)&quot; because &quot;this.helloWorldMapper&quot; is null</span><br><br><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">javax.servlet.http.HttpServlet.service(HttpServlet.java:626)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:72)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">javax.servlet.http.HttpServlet.service(HttpServlet.java:733)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:167)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:134)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:183)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.zsj.springbootmerge.helloworld.HelloWorldControllerTest.selectList(HelloWorldControllerTest.<span class="hljs-keyword">java:36)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native </span>Method)<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.lang.reflect.Method.invoke(Method.java:564)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:686)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:212)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:208)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:137)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:71)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.util.ArrayList.forEach(ArrayList.java:1511)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.util.ArrayList.forEach(ArrayList.java:1511)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:248)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$5(DefaultLauncher.java:211)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:199)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:132)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.intellij.<span class="hljs-keyword">junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.intellij.rt.<span class="hljs-keyword">junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.intellij.rt.<span class="hljs-keyword">junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> com.intellij.rt.<span class="hljs-keyword">junit.JUnitStarter.main(JUnitStarter.java:53)</span><br><span class="hljs-keyword"></span>Caused <span class="hljs-keyword">by: </span><span class="hljs-keyword">java.lang.NullPointerException: </span>Cannot invoke <span class="hljs-string">&quot;com.zsj.springbootmerge.helloworld.mapper.HelloWorldMapper.selectList(com.baomidou.mybatisplus.core.conditions.Wrapper)&quot;</span> <span class="hljs-keyword">because </span><span class="hljs-string">&quot;this.helloWorldMapper&quot;</span> is null<br><span class="hljs-built_in">at</span> com.zsj.springbootmerge.helloworld.HelloWorldController.list(HelloWorldController.<span class="hljs-keyword">java:22)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native </span>Method)<br><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">java.base/java.lang.reflect.Method.invoke(Method.java:564)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)</span><br><span class="hljs-keyword"></span><span class="hljs-built_in">at</span> <span class="hljs-keyword">org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)</span><br><span class="hljs-keyword"></span>... <span class="hljs-number">72</span> more<br></code></pre></td></tr></table></figure><h2 id="1-2-原因描述"><a href="#1-2-原因描述" class="headerlink" title="1.2 原因描述"></a>1.2 原因描述</h2><p>如果类A中存在成员属性b, b是通过@Autowired自动注入，而类A的实例是通过new的方式产生的，那么自动注入b就会失效的，此时需要通过其他方式来注入b。</p><h2 id="1-3-解决方法"><a href="#1-3-解决方法" class="headerlink" title="1.3 解决方法"></a>1.3 解决方法</h2><p>问题就出在当我们的<code>HelloController</code>是我们手动<code>new</code>的，那么，我们在HelloWorldControllerTest.class中进行修改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.zsj.springbootmerge.helloworld;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.http.MediaType;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.MockMvc;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;<br><span class="hljs-keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldControllerTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> HelloWorldController helloWorldController;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MockMvc</span> <span class="hljs-variable">mockMvc</span> <span class="hljs-operator">=</span> MockMvcBuilders.standaloneSetup(helloWorldController).build();<br>        mockMvc.perform(<br>                MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hello-world/say&quot;</span>)<br>                        .param(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zhongshijie&quot;</span>)<br>                        .accept(MediaType.APPLICATION_JSON)<br>        ).andExpect(<br>                MockMvcResultMatchers.status().isOk()<br>        ).andDo(<br>                MockMvcResultHandlers.print()<br>        ).andReturn();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectList</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MockMvc</span> <span class="hljs-variable">mockMvc</span> <span class="hljs-operator">=</span> MockMvcBuilders.standaloneSetup(helloWorldController).build();<br>        mockMvc.perform(<br>                MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/hello-world/list&quot;</span>)<br>                        .accept(MediaType.APPLICATION_JSON)<br>        ).andExpect(<br>                MockMvcResultMatchers.status().isOk()<br>        ).andDo(<br>                MockMvcResultHandlers.print()<br>        ).andReturn();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改动的地方包括：</p><ul><li>添加<code>@Autowired</code>来改变<code>HelloWorldController</code>的实例来源。</li><li>随后不再通过<code>new</code>来使用<code>HelloWorldController</code>，而是通过自动注入的<code>helloWorldController</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot单元测试中XXXMapper为null</title>
    <link href="/posts/30003/"/>
    <url>/posts/30003/</url>
    
    <content type="html"><![CDATA[<h1 id="1-假设你来面试～看图找问题"><a href="#1-假设你来面试～看图找问题" class="headerlink" title="1. 假设你来面试～看图找问题"></a>1. 假设你来面试～看图找问题</h1><p><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220303233556.png" alt="看图找问题"></p><p>图中进行如下内容，最后在单元测试中<code>userMapper</code>为null而报错。</p><ol><li>准备了一个<code>HelloController</code>，其中通过<code>userMapper</code>进行了数据库交互并查询到数据列表；</li><li>准备了一个<code>MockMvc</code>，通过<code>StandaloneSetup</code>加载了一个<code>HelloController</code>进行单元测试；</li></ol><h1 id="2-答案与解析"><a href="#2-答案与解析" class="headerlink" title="2. 答案与解析"></a>2. 答案与解析</h1><p>很多人第一反应是去排查图中的<code>user()</code>测试方法，首先任务<code>Mock</code>这里肯定没问题，但实际上，问题恰恰就仅仅出现在这里。先看看行之有效的修复：</p><ol><li>准备了一个<code>WebApplicationContext</code>中测试类内；</li><li>准备了一个<code>MockMvc</code>，通过<code>WebAppContextSetup</code>加载<code>applicationContext</code>进行单元测试；<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220303234110.png" alt="答案"></li></ol><p>其实，通过阅读<code>MockMvc</code>的源码可以得知，<code>StandaloneSetup</code>加载只会初始化<code>Controller</code>的底层的依赖，不会包括<code>Component</code>和其他用户的<code>Bean</code>，那么其中的<code>userMapper</code>自然也就没有被初始化了。<br><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20220303234137.png" alt="解析"></p>]]></content>
    
    
    <categories>
      
      <category>经验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows配置多种数据库环境</title>
    <link href="/posts/10003/"/>
    <url>/posts/10003/</url>
    
    <content type="html"><![CDATA[<p>也许，你也曾经遇到过这样的问题：企业数据库服务器资源有限且自己不具备DBA权限，你想要在自己的PC中搭建出各种数据库环境以进行对比实验，例如：进行Oracle数据库迁移到MySQL中的对比实验等等……于是，我们企图运行一个专用的数据库服务器，让你享受一次自己做DBA的感觉，让你的实验更加方便和快捷。</p><p>我们其实希望达到<strong>在Windows中配置各种数据库服务的实验环境，建造于VMware中使得它随时可以移植起其他硬件设备继续实验</strong>的效果，为此，解决方案就可以是：在我们的VMware中安装一个Windows10环境，让它作为一个全职数据库服务器（既不污染开发环境，又方便迁移到其他计算机中），对数据库的安装和配置操作均在这个虚拟环境中进行，当然，你也可以直接在你的物理机中执行这些操作，只是便不具备上述所说的优点罢了。</p><p><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20210214224333.png" alt="VMware中运行一个属于自己的多功能数据库服务器"></p><p>话不多说，这里直接提供一个已经安装好了 Oracle19c + MySQL8 + MongoDB4.4 的数据库服务Windows10环境，使用VMware Player 16直接打开即可使用，免去安装和配置的烦恼，点击<a href="https://cloud.189.cn/t/eIFraefAZjIr">此处下载</a></p><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><h2 id="安装Oracle数据库"><a href="#安装Oracle数据库" class="headerlink" title="安装Oracle数据库"></a>安装Oracle数据库</h2><ol><li>下载Oracle数据库 <a href="https://www.oracle.com/database/technologies/oracle-database-software-downloads.html">安装程序</a></li><li>通过安装程序<code>setup.exe</code>进行安装</li><li>填写必要的信息，<strong>取消勾选“创建为容器数据库”</strong></li><li>实例名为默认为ORCL，如果修改了需要自己牢记。</li></ol><h2 id="管理Oracle数据库"><a href="#管理Oracle数据库" class="headerlink" title="管理Oracle数据库"></a>管理Oracle数据库</h2><ol start="0"><li><p>打开<code>SQLPlus</code>或其他数据连接工具，用户名为system，密码为安装时提供的口令</p></li><li><p>创建Oracle用户和表空间（以用户名zsj，密码zsjpwd，表空间名zsj为例）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> c##zsj identified <span class="hljs-keyword">by</span> zsjpwd;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>space zsj datafile <span class="hljs-string">&#x27;C:\Users\zhongshijie\Oracle\zsj\zsj.dbf&#x27;</span> size <span class="hljs-number">32</span>m autoextend <span class="hljs-keyword">on</span> next <span class="hljs-number">32</span>m maxsize <span class="hljs-number">10240</span>m;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> c##zsj <span class="hljs-keyword">default</span> tablespace zsj;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">create</span> session,<span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span>,unlimited tablespace <span class="hljs-keyword">to</span> c##zsj;<br></code></pre></td></tr></table></figure></li><li><p>删除Oracle用户和表空间（以用户名zsj，表空间名zsj为例）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> c##zsj;<br><span class="hljs-keyword">drop</span> tablespace zsj including contents <span class="hljs-keyword">and</span> datafiles CASCADE CONSTRAINTS;<br></code></pre></td></tr></table></figure></li></ol><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="安装MySQL数据库"><a href="#安装MySQL数据库" class="headerlink" title="安装MySQL数据库"></a>安装MySQL数据库</h2><ol><li>下载MySQL数据库<a href="https://dev.mysql.com/downloads/installer/">安装程序</a>（或从清华镜像源中<a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQLInstaller/">安装程序镜像</a>）</li><li>通过msi进行安装，填写必要的信息，<strong>选择Server Only选项</strong></li><li>打开<code>MySQLX.X Command Line Client</code>，执行如下命令<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL">use mysql;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host<span class="hljs-operator">=</span><span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush privileges;<br></code></pre></td></tr></table></figure></li></ol><h2 id="管理MySQL数据库"><a href="#管理MySQL数据库" class="headerlink" title="管理MySQL数据库"></a>管理MySQL数据库</h2><ol start="0"><li>打开任意数据库连接工具，用户名为root，密码为安装时提供的口令</li><li>创建MySQL用户和表空间（以用户名zsj，密码zsjpwd，表空间名zsj为例）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;zsj&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;zsjpwd&#x27;</span> ;<br><span class="hljs-keyword">create</span> schema zsj <span class="hljs-keyword">default</span> <span class="hljs-type">character</span> <span class="hljs-keyword">set</span> utf8mb4 <span class="hljs-keyword">collate</span> utf8mb4_general_ci ;<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> zsj.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> zsj ;<br>flush privileges ;<br></code></pre></td></tr></table></figure></li><li>删除MySQL用户和表空间（以用户名zsj,表空间名zsj为例）<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> zsj cascade;<br></code></pre></td></tr></table></figure></li></ol><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="安装MongoDB数据库"><a href="#安装MongoDB数据库" class="headerlink" title="安装MongoDB数据库"></a>安装MongoDB数据库</h2><ol><li>下载MongoDB数据库<a href="https://www.mongodb.com/try/download/community">安装程序</a></li><li>通过msi进行安装，使用<code>Complete</code>模式（直接安装到系统盘）或<code>Custom</code>模式（手动指定安装位置）</li><li>编辑安装目录下的<code>XXX\bin\mongod.conf</code>中的<code>bindIp</code>为<code>0.0.0.0</code>，使其可以被任何IP连接访问</li></ol><h2 id="管理MongoDB数据库"><a href="#管理MongoDB数据库" class="headerlink" title="管理MongoDB数据库"></a>管理MongoDB数据库</h2><ol start="0"><li>打开任意数据库连接工具，无须用户名和密码</li><li>创建or切换到数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">use zsj<br></code></pre></td></tr></table></figure></li><li>删除数据库<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">use zsj<br>db.dropDatabase()<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Oracle</tag>
      
      <tag>MySQL</tag>
      
      <tag>MongoDB</tag>
      
      <tag>VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>轻快的深度学习图像目标检测</title>
    <link href="/posts/40001/"/>
    <url>/posts/40001/</url>
    
    <content type="html"><![CDATA[<h1 id="light-object-detection"><a href="#light-object-detection" class="headerlink" title="light_object_detection"></a>light_object_detection</h1><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>轻快、简明、高效、精确的深度学习图像目标检测</p><h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p><img src="https://zhongshijie1995.github.io/zhongshijie-pic/img/20211010113046.png" alt="效果"></p><h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="编译yolo3"><a href="#编译yolo3" class="headerlink" title="编译yolo3"></a>编译yolo3</h2><ol><li>使用如下命令，从Gitee拉取世杰分享的项目源码：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/zhongshijie1995/light_object_detection.git<br></code></pre></td></tr></table></figure></li><li>接下来的所有操作，都在该项目下进行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> LightObjectDetection<br></code></pre></td></tr></table></figure></li><li>编译项目<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">make</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h2 id="上手体验（使用预训练）"><a href="#上手体验（使用预训练）" class="headerlink" title="上手体验（使用预训练）"></a>上手体验（使用预训练）</h2><ol><li>下载yolov3模型的权重<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>pjreddie.com<span class="hljs-regexp">/media/</span>files/yolov3.weights<br></code></pre></td></tr></table></figure></li><li>运行开始体验的python脚本<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> sc_start_experience.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure></li><li>查看结果<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fim</span> predictions.jpg<br></code></pre></td></tr></table></figure></li></ol><h2 id="训练自己的数据"><a href="#训练自己的数据" class="headerlink" title="训练自己的数据"></a>训练自己的数据</h2><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><h4 id="0-下载预训练模型"><a href="#0-下载预训练模型" class="headerlink" title="0. 下载预训练模型"></a>0. 下载预训练模型</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>pjreddie.com<span class="hljs-regexp">/media/</span>files/darknet53.conv.<span class="hljs-number">74</span><br></code></pre></td></tr></table></figure><h4 id="1-对图片进行标注"><a href="#1-对图片进行标注" class="headerlink" title="1. 对图片进行标注"></a>1. 对图片进行标注</h4><h5 id="（方法1）使用标注工具"><a href="#（方法1）使用标注工具" class="headerlink" title="（方法1）使用标注工具"></a>（方法1）使用标注工具</h5><ol><li>启动标注工具集<figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">pip3 install <span class="hljs-keyword">label</span>Img<br><span class="hljs-keyword">label</span>Img<br></code></pre></td></tr></table></figure></li><li>点击VOC以选择YOLO模式，并进行标注</li><li>完成</li></ol><p>#####（方法2）自己制作数据集</p><ol><li>实际上，我们需要的数据集格式是每一张图片对应一个.txt标签文件，其中包含以下信息：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">对象的序号</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">对象中心点的x坐标</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">想象中心点的y坐标</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">对象的宽度</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">对象的高度</span>&gt;</span><br>...<br>...<br></code></pre></td></tr></table></figure></li><li>将上述提及的分类配置、标签文件、图片（相同文件名，不同后缀名）以放入项目的如下结构中<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">- LightObjectDetection<br>   - train_data<br>      - classes<span class="hljs-selector-class">.txt</span><br>      - <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.jpg</span><br>      - <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span><br>      - <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.jpg</span><br>      - <span class="hljs-selector-tag">b</span>.txt<br></code></pre></td></tr></table></figure></li><li>完成！</li></ol><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><ol><li>对开始训练的脚本进行设置，并运行！就这么简单！<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python3</span> sc_start_train.<span class="hljs-keyword">py</span><br></code></pre></td></tr></table></figure></li><li>输入参数<br>Run with GPU?（y or n）<br>How large is each batch?（Integer）<br>How many batches? （Integer）</li><li>静待声名远扬的yolo3的运行</li></ol><h3 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h3><p>还记得编译项目之后的上手体验吗？有了模型和训练出来的权重，你应该能完成了！</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YOLO</tag>
      
      <tag>深度学习</tag>
      
      <tag>图像目标检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
